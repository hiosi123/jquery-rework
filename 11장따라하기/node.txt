1. 노드 다루기
- 실무에서는 찾은 노드의 개수가 몇 개인지부터 시작해 찾은 노드를 순서적으로 접근하기
그리고 찾은 노드 중에서 특정 노드만 찾거나 걸러내야 하는 등의 작업을 해야한다.

2. 노드 다루기 방법
- $대상.length
(jquery의 length 프로퍼티를 이용하면 객체 내부에 들어있는 노드 개수를 구할 수 있다.)

- $대상.eq(index)
(jQuery 의 eq() 메서드를 찾은 노드의 n번재 해당하는 노드에 접근할 수 있다.)

- $대상.get(index)
(jQuery 의 get()메서드는 jQuery 에서 지원하지 않는 기능은 이 기능을 갖고 있는 자바스크립트
DOM에 직접 접근해서 사용 해야 한다. 이때 사용하는 메서드가 get() 이며, 리턴값은 jQuery객체가 아니라 자바스크립트의 DOM 객체라는것을 기억하자)

- $대상.each(function(index){
  let $target = $(this)
})
$this는 array ul 아래에 있는 li 태그들의 색을 바꾸거나, 현재 선택한 버튼을 누른 li태그를 리턴한다.

ex) each()는 $대상에 들어있는 노드 개수만큼 매개변수 값으로 넘겨 받은 함수를 반복해서 호출 해준다.

$('ul.menu li').each(function(index){
  console.log(index)
})

$('.btn').click(function(){
  $(this).html('버튼클릭')
})

4. $대상.filter('선택자') 같은 레벨 (형제)
- 찾은 노드 중에서 특정 노드만을 걸러내고 싶을 떄 filter()메서드를 사용한다.
아울러 기억할 점은 filter() 가 찾는 대상은 오직 현재 찾은 노드를 말하면 같은 레벨안에 있는 것만 
찾는다. 자식, 자손 부모 노드와는 전혀 상관이 없다.

5. $대상.find('선택자') 하위 요소 (자식)
찾은 노드(자식, 자손 포함) 중에서 특정 노드 만을 찾고 싶을 때 find() 메서드를 사용한다.
아울러기억할 점은 find() 가 찾는 대상은 찾은 노드가 아닌 현재 노드의 자식을 포함한 자손 노드를 검색한다는 것이다.

6. $대상.index(), $목록.index($대상))

하위 노드의 하위 노드는 자식 노드가 아닌 자손 노드이다.
7. $대상.children()

ex) 
크게 차이가 없음
$대상.children().first()
$대상.children().eq(0)
$대상.children('.first') 효율적이기는 하나
$대상.children('.eq(0)') 효율적이기는 하나

$대상.children().last()
$대상.children().eq(-1)
$대상.children('.last')
$대상.children('.eq(-1)')
선택자를 이용한 방법이 효율적이긴 하나 그다지 큰 상관은 없음

8. 부모 노드란
- 부모 노드 찾기
$대상.parent()
- 조상 노드 찾기
$대상.parents(['선택자'])

특정 노드의 모든 조상 노드를 찾고 싶은 경우 parents()를 이용한다.
이 때, 일반 jQuer에 메세드와 마찬가지로 선택자를 이용하면 특정 조상 노드만을 
쉽게 찾을 수 있다.

9. 형제 노드란?
형제 노드란 같이 레벨에 있는 노드를 의미한다.

$대상.prev(), $대상.prevAll(['선택자'])
prev() 두번 연속 호출하면 이전의 이전 형제 노드에 접근 할 수 있다. 

$대상.next(), $대상.nextAll(['선택자'])